#!/usr/bin/env ruby

require 'yaml'
require 'erb'
require 'fileutils'

class UnsupportedDatabaseAdapter < RuntimeError

  attr_reader :adapter

  def initialize(adapter)
    @adapter = adapter
  end

  def message
    "Adapter `#{adapter}` is not supported."
  end

end

class AbstractAdapter

  def self.build(config, dump_folder)
    klass = case config['adapter']
    when 'postgresql'
      PostgreSQLAdapter
    when 'mysql2'
      MySQLAdapter
    else
      raise UnsupportedDatabaseAdapter.new(config['adapter'])
    end

    klass.new(config, dump_folder)
  end

  def initialize(config, dump_folder)
    @config = config
    @database_name = config['database']

    @dump_folder = dump_folder
  end

  def dump(branch_name)
    print "Saving state of database on '#{branch_name}' branch..."

    if system(dump_cmd(branch_name))
      print "done!\n"
      true
    else
      print "failed!\n"
      false
    end
  end

  def dump_exists?(branch_name)
    File.exist?(dump_file(branch_name))
  end

  def restore(branch_name)
    print "Restoring #{database_name} to its previous state on this branch..."

    if system(restore_cmd(branch_name))
      print "done!\n"
      true
    else
      print "failed!\n"
      false
    end
  end

  private

  attr_reader :dump_folder, :database_name

  def dump_cmd(branch_name)
    raise NotImplementedError
  end

  def restore_cmd(branch_name)
    raise NotImplementedError
  end

  def dump_file(branch_name)
    # Replace any special characters that may cause file system issues
    branch_name = branch_name.gsub(/[^0-9a-z.\-_]/i, '_')

    "#{dump_folder}/#{database_name}-#{branch_name}"
  end

end

class MySQLAdapter < AbstractAdapter

  def initialize(*)
    super

    @username = @config['username']
    @password = @config['password']
  end

  private

  attr_reader :username, :password

  def dump_cmd(branch_name)
    %[mysqldump --add-drop-database --user=#{username} --password="#{password}" --databases #{database_name} > "#{dump_file(branch_name)}"]
  end

  def restore_cmd(branch_name)
    %[mysql -u #{username} --password="#{password}" #{database_name} < "#{dump_file(branch_name)}"]
  end

end

class PostgreSQLAdapter < AbstractAdapter

  private

  def dump_cmd(branch_name)
    # Delete legacy SQL dump, or previous directory-format archive since folder cannot already exist
    if File.exist?(dump_file(branch_name))
      FileUtils.rm_r dump_file(branch_name)
    end

    %[pg_dump --file="#{dump_file(branch_name)}" --format=directory --jobs=#{number_of_jobs} #{database_name}]
  end

  def restore_cmd(branch_name)
    # Drop existing connections
    system(%[psql --command="SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '#{database_name}' AND pid <> pg_backend_pid();" postgres > /dev/null])

    # Drop database
    system(%[dropdb #{database_name}])

    # Create database
    system(%[createdb #{database_name}])

    if File.directory?(dump_file(branch_name))
      # Restore directory-format archive
      %[pg_restore --dbname=#{database_name} --jobs=#{number_of_jobs} "#{dump_file(branch_name)}"]
    else
      # Restore legacy SQL dump
      %[psql --file="#{dump_file(branch_name)}" #{database_name} > /dev/null]
    end
  end

  def number_of_jobs
    require 'etc'

    if Etc.respond_to?(:nprocessors) # Available in 2.2.3+
      Etc.nprocessors
    else
      1
    end
  end

end

# If this was a branch checkout
if ARGV[2] == '1'
  def branches_from_refhead(ref)
    `git show-ref --heads | grep #{ref} | awk '{print $2}'`.split("\n").map{ |b| b.sub(/^refs\/heads\//, '') }
  end

  def prepare_test_database
    if File.exist?("#{@project_root}/Rakefile")
      print "Preparing test database..."

      rake_cmd = "rake db:test:prepare"

      if File.exist?("#{@project_root}/bin/rake")
        rake_cmd = "./bin/#{rake_cmd}"
      elsif File.exist?("#{@project_root}/Gemfile")
        rake_cmd = "bundle exec #{rake_cmd}"
      end

      system rake_cmd

      print "done!\n"
    else
      print "No Rakefile detected, skipping test database restoration\n"
    end
  end

  # Get the current (destination) branch
  @destination_branch = `git rev-parse --abbrev-ref HEAD`.strip

  # Since we're just given a commit ID referencing the branch head we're coming from,
  # it could be at the head of multiple branches. We can assume the source isn't the same as the
  # destination branch, so we can remove that immediately.
  @source_branches = branches_from_refhead(ARGV[0]).reject{ |b| b == @destination_branch }

  @project_root = %x[git rev-parse --show-toplevel].strip
  @dump_folder = "#{@project_root}/.db_branch_dumps"

  # Load Rails DB config and grab database name
  config = ERB.new(File.read("#{@project_root}/config/database.yml")).result
  @rails_db_config = YAML.respond_to?(:unsafe_load) ? YAML.unsafe_load(config) : YAML.load(config)
  dev_database_name = @rails_db_config['development']['database']

  begin
    @adapter = AbstractAdapter.build(@rails_db_config['development'], @dump_folder)
  rescue UnsupportedDatabaseAdapter => e
    puts "\nERROR: #{e.message}"
    exit
  end

  # Ensure dump directory exists
  unless Dir.exist?(@dump_folder)
    Dir.mkdir @dump_folder
  end

  # Don't do anything if the source and destination branches are the same or nonexistent
  unless @source_branches.include?(@destination_branch) || @source_branches.empty? || (@source_branches | [@destination_branch]).any?{ |b| b == '' }
    # Dump database for source branches
    if @source_branches.all? { |branch| @adapter.dump(branch) }
      # Restore dump from this branch, if it exists
      if @adapter.dump_exists?(@destination_branch)
        if @adapter.restore(@destination_branch)
          prepare_test_database
        end
      else
        print "No DB dump for #{dev_database_name} on the '#{@destination_branch}' branch was found!\n"
        print "The state of your database has been saved for when you return to the '#{@source_branches.join('\' or \'')}' branch, but its current state has been left unchanged.  You are now free to make changes to it that are specific to this branch, and they will be saved when you checkout a different branch, then restored when you checkout this one again.\n"
      end
    else
      print "Failed to dump database. Halting.\n"
    end
  end
end
